{"version":3,"sources":["registerServiceWorker.js","theme/index.js","components/AccountForm/styles.js","components/AccountForm/AccountForm.js","components/AccountForm/index.js","pages/Home/styles.js","pages/Home/Home.js","pages/Home/index.js","pages/Home/HomeContainer.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","createMuiTheme","palette","primary","main","secondary","styles","theme","formControl","marginBottom","spacing","unit","width","formButton","marginTop","formToggle","background","border","textDecoration","&:hover","cursor","accountForm","Object","defineProperty","breakpoints","up","errorMessage","color","AccountForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this2","classes","react_default","a","createElement","onSubmit","className","FormControl","fullWidth","InputLabel","htmlFor","Input","id","type","inputProps","autoComplete","value","Grid","container","direction","justify","alignItems","Button","variant","size","disabled","Typography","onClick","setState","Component","withStyles","root","flexGrow","height","padding","headline","fontWeight","text","fontSize","typography","h3","h1","subheading","_ref","item","xs","sm","md","gutterBottom","components_AccountForm","HomeContainer","pages_Home_Home","ReactDOM","render","ThemeProvider","CssBaseline","pages_Home","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c080c259.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport default createMuiTheme({\n  palette: {\n    primary: {\n      main: '#f9a825'\n    },\n    secondary: {\n      main: '#212121'\n    }\n  }\n});\n","const styles = theme => ({\n  formControl: {\n    marginBottom: theme.spacing.unit * 2,\n    width: '100%'\n  },\n  formButton: {\n    marginTop: theme.spacing.unit * 2\n  },\n  formToggle: {\n    background: 'none',\n    border: 'none',\n    textDecoration: 'underline',\n    '&:hover': {\n      cursor: 'pointer'\n    }\n  },\n  accountForm: {\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '400px'\n    }\n  },\n  errorMessage: {\n    color: 'firebrick'\n  }\n});\n\nexport default styles;\n","import { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\n/**\n * @TODO: Uncomment the following lines when authentication is added to the form\n *\n * import { Form, Field } from 'react-final-form'\n *\n * import {\n *    LOGIN_MUTATION,\n *    SIGNUP_MUTATION,\n *    VIEWER_QUERY\n * } from '../../apollo/queries';\n * import { graphql, compose } from 'react-apollo';\n * import validate from './helpers/validation'\n */\n\nimport styles from './styles';\n\nclass AccountForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      formToggle: true\n    };\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      // @TODO: Wrap in Final Form <Form />\n      <form\n        onSubmit={() => {\n          console.log('Submitted');\n        }}\n        className={classes.accountForm}\n      >\n        {!this.state.formToggle && (\n          <FormControl fullWidth className={classes.formControl}>\n            <InputLabel htmlFor=\"fullname\">Username</InputLabel>\n            {/* @TODO: Wrap in a Final Form <Field /> */}\n            <Input\n              id=\"fullname\"\n              type=\"text\"\n              inputProps={{\n                autoComplete: 'off'\n              }}\n              value={''}\n            />\n            {/* @TODO: Close Final Form <Field /> */}\n          </FormControl>\n        )}\n        <FormControl fullWidth className={classes.formControl}>\n          <InputLabel htmlFor=\"email\">Email</InputLabel>\n          {/* @TODO: Wrap in a Final Form <Field /> */}\n          <Input\n            id=\"email\"\n            type=\"text\"\n            inputProps={{\n              autoComplete: 'off'\n            }}\n            value={''}\n          />\n          {/* @TODO: Close Final Form <Field /> */}\n        </FormControl>\n        <FormControl fullWidth className={classes.formControl}>\n          <InputLabel htmlFor=\"password\">Password</InputLabel>\n          {/* @TODO: Wrap in a Final Form <Field /> */}\n          <Input\n            id=\"password\"\n            type=\"password\"\n            inputProps={{\n              autoComplete: 'off'\n            }}\n            value={''}\n          />\n          {/* @TODO: Close Final Form <Field /> */}\n        </FormControl>\n        <FormControl className={classes.formControl}>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-between\"\n            alignItems=\"center\"\n          >\n            <Button\n              type=\"submit\"\n              className={classes.formButton}\n              variant=\"contained\"\n              size=\"large\"\n              color=\"secondary\"\n              disabled={\n                false // @TODO: This prop should depend on pristine or valid state of form\n              }\n            >\n              {this.state.formToggle ? 'Enter' : 'Create Account'}\n            </Button>\n            <Typography>\n              <button\n                className={classes.formToggle}\n                type=\"button\"\n                onClick={() => {\n                  // @TODO: Reset the form on submit\n                  this.setState({\n                    formToggle: !this.state.formToggle\n                  });\n                }}\n              >\n                {this.state.formToggle\n                  ? 'Create an account.'\n                  : 'Login to existing account.'}\n              </button>\n            </Typography>\n          </Grid>\n        </FormControl>\n        <Typography className={classes.errorMessage}>\n          {/* @TODO: Display sign-up and login errors */}\n        </Typography>\n      </form>\n      // @TODO: Close Final Form <Form />\n    );\n  }\n}\n\n// @TODO: Use compose to add the login and signup mutations to this components props.\n// @TODO: Refetch the VIEWER_QUERY to reload the app and access authenticated routes.\nexport default withStyles(styles)(AccountForm);\n","import AccountForm from './AccountForm';\n\nexport default AccountForm;\n","const styles = theme => ({\n  root: {\n    flexGrow: 1,\n    height: '100%',\n    background: theme.palette.primary.main,\n    padding: theme.spacing(5),\n    [theme.breakpoints.up('md')]: {\n      padding: theme.spacing(20)\n    }\n  },\n  headline: {\n    fontWeight: 500,\n    color: theme.palette.text.primary,\n    fontSize: theme.typography.h3.fontSize,\n    [theme.breakpoints.up('md')]: {\n      fontSize: theme.typography.h1.fontSize\n    }\n  },\n  subheading: {\n    fontWeight: 400,\n    color: 'white'\n  }\n});\n\nexport default styles;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport AccountForm from '../../components/AccountForm';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from './styles';\n\nconst Home = ({ classes }) => {\n  return (\n    <Grid\n      container\n      className={classes.root}\n      direction=\"row\"\n      alignItems=\"center\"\n      justify=\"center\"\n    >\n      <Grid item xs={12} sm={12} md={6}>\n        <Typography\n          variant=\"button\"\n          gutterBottom\n          className={classes.subheading}\n        >\n          Boomtown\n        </Typography>\n        <Typography variant=\"h1\" className={classes.headline}>\n          Share. Borrow. Prosper.\n        </Typography>\n      </Grid>\n      <Grid item xs={12} sm={12} md={6}>\n        <Typography gutterBottom variant=\"h3\">\n          Welcome home.\n        </Typography>\n        <AccountForm />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(styles)(Home);\n","import HomeContainer from './HomeContainer';\n\nexport default HomeContainer;\n","import React, { Component } from 'react';\nimport Home from './Home';\n\nclass HomeContainer extends Component {\n  render() {\n    return <Home />;\n  }\n}\nexport default HomeContainer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n// @TODO: Uncomment each module as needed in your client app\n// import { ApolloProvider } from 'react-apollo'\n// import { BrowserRouter } from 'react-router-dom'\n// import { Provider as ReduxProvider } from 'react-redux'\n// -------------------------------\n\nimport registerServiceWorker from './registerServiceWorker';\nimport theme from './theme';\n\n/**\n * @TODO: Initialize Apollo Client\n *\n * Uncomment the following line when Apollo Client is configured:\n *\n * import client from './apollo'\n *\n * Below in your <App />, wrap your pages in an <ApolloProvider /> component\n * and pass it `client` as the `client` prop value so they will\n * have access to data exposed by your GraphQL API.\n */\n\n/**\n * @TODO: Add Routing\n *\n * Uncomment the following line when your routes are configured\n *\n * import AppRoutes from './routes'\n *\n * Below in your <App />, nest your <AppRoutes /> inside of <BrowserRouter />\n * component to enable routing in your client app.\n */\n\n/**\n * @TODO: Initialize Redux Store\n *\n * Uncomment the following line when your Redux store is configured\n *\n * import store from './redux'\n *\n * Below in your <App />, wrap a <ReduxProvider /> component around all\n * of the app's children, and pass it the imported `store` as the `store`\n * prop's value.\n */\n\n/**\n * @TODO: Add the Viewer Context\n *\n * import { ViewerProvider } from './context/ViewerProvider'\n *\n * Below in your <App />, wrap the <ViewerProvider /> component around\n * the <BrowserRouter /> component so the router is aware of whether a\n * user is currently logged in and who that user is.\n */\n\n// @TODO: Remove this import once you have your router working below\nimport Home from './pages/Home';\n// -------------------------------\n\nimport './index.css';\n\nconst App = () => {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Home />\n    </MuiThemeProvider>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}